var g=Object.defineProperty;var m=(o,i,e)=>i in o?g(o,i,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[i]=e;var a=(o,i,e)=>m(o,typeof i!="symbol"?i+"":i,e);class h extends Application{constructor(){super(...arguments);a(this,"previousActor",null);a(this,"propertyGroupPaths",{disciplines:"wod.types.discipline",disciplinePath:"wod.types.disciplinepath",attributes:"attributes",abilities:"abilities"});a(this,"experienceMultipliers",{attributes:4,abilities:2})}maybeAddExperienceCost(e,s){if(!this.previousActor)return;const t=this.getValuesChanged(e,this.previousActor),r=this.calcExperienceCost(t);this.createExperienceItem({amount:r,...t},s)}storeActor(e){this.previousActor={...e}}getValuesChanged(e,s){const{group:t,property:r}=this.getPropertyChanged(e),c=s.system[t][r].value,p=e.system[t][r].value;return{group:t,property:r,oldValue:c,newValue:p}}getPropertyChanged(e){const s={...e.system};for(let t in this.propertyGroupPaths)if(s[t])return{group:t,property:Object.keys(s[t])[0]};return{group:"",property:""}}calcExperienceCost({group:e,oldValue:s,newValue:t}){const r=this.experienceMultipliers[e];return t>s?this.sumExperienceCost(s,t,r):s>t?this.sumExperienceCost(t,s,r):0}sumExperienceCost(e,s,t){const r=s>e,c=Math.abs(s-e);let p=r?e:s,n=0;for(let u=0;u<c;u++)n+=p*t,p++;return console.log(n),n}createExperienceItem({amount:e,property:s,oldValue:t,newValue:r},c){const n=r>t?"wod.types.expgained":"wod.types.expspent";c.createEmbeddedDocuments("Item",[{name:"Gasto exp",type:"Experience",system:{iscreated:!0,isactive:!1,isvisible:!0,version:"4.1.5",parentid:"",worldanvil:"",reference:"",description:`${s} de ${t} a ${r}`,details:"",property:[],bonuslist:[],isspent:!0,amount:e,type:n},img:"icons/svg/item-bag.svg",effects:[],folder:null,sort:0}])}}const x="vampire-20-exp-counter",d=x;let l;Hooks.once("init",()=>{console.log(`Initializing ${d}`),l=game.modules.get(d),l.experienceCounter=new h});Hooks.on("updateItem",(o,i,e,s)=>{console.log("item",o),console.log("changed",i),console.log("options",e),console.log("userId",s)});Hooks.on("updateActor",(o,i)=>{l.experienceCounter.maybeAddExperienceCost(i,o)});Hooks.on("preUpdateActor",o=>{l.experienceCounter.storeActor(o)});
//# sourceMappingURL=module.js.map
