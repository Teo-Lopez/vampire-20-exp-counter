{"version":3,"file":"module.js","sources":["../../src/ts/apps/experienceCounter.ts","../../src/ts/constants.ts","../../src/ts/module.ts"],"sourcesContent":["import { Changed } from '../module'\r\n\r\ninterface AttributeChange {\r\n  group: string\r\n  property: string\r\n  oldValue: number\r\n  newValue: number\r\n  amount?: number\r\n}\r\nexport default class ExperienceCounter extends Application {\r\n  previousActor: Actor | null = null\r\n  propertyGroupPaths = {\r\n    disciplines: 'wod.types.discipline',\r\n    disciplinePath: 'wod.types.disciplinepath',\r\n    attributes: 'attributes',\r\n    abilities: 'abilities',\r\n  }\r\n  experienceMultipliers: Record<string, number> = {\r\n    attributes: 4,\r\n    abilities: 2,\r\n  }\r\n\r\n  maybeAddExperienceCost(changed: Changed, actor: Actor) {\r\n    if (!this.previousActor) return\r\n    const attributeChangeData = this.getValuesChanged(\r\n      changed,\r\n      this.previousActor\r\n    )\r\n    const amount = this.calcExperienceCost(attributeChangeData)\r\n    this.createExperienceItem({ amount, ...attributeChangeData }, actor)\r\n  }\r\n\r\n  storeActor(actor: Actor) {\r\n    this.previousActor = { ...actor } as Actor\r\n  }\r\n\r\n  getValuesChanged(changed: Changed, previousActor: Actor): AttributeChange {\r\n    const { group, property } = this.getPropertyChanged(changed)\r\n    const oldValue = (previousActor.system as Record<string, any>)[group][\r\n      property\r\n    ].value\r\n    const newValue = changed.system[group][property].value\r\n\r\n    const valuesChanged = {\r\n      group,\r\n      property,\r\n      oldValue,\r\n      newValue,\r\n    }\r\n\r\n    return valuesChanged\r\n  }\r\n\r\n  private getPropertyChanged(changed: Changed): {\r\n    group: string\r\n    property: string\r\n  } {\r\n    const propertiesChanged = { ...changed.system }\r\n    for (let group in this.propertyGroupPaths) {\r\n      if (propertiesChanged[group]) {\r\n        return {\r\n          group,\r\n          property: Object.keys(propertiesChanged[group])[0],\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      group: '',\r\n      property: '',\r\n    }\r\n  }\r\n\r\n  calcExperienceCost({ group, oldValue, newValue }: AttributeChange) {\r\n    const multiplier = this.experienceMultipliers[group]\r\n\r\n    if (newValue > oldValue) {\r\n      return this.sumExperienceCost(oldValue, newValue, multiplier)\r\n    } else if (oldValue > newValue) {\r\n      return this.sumExperienceCost(newValue, oldValue, multiplier)\r\n    } else {\r\n      return 0\r\n    }\r\n  }\r\n\r\n  sumExperienceCost(oldValue: number, newValue: number, multiplier: number) {\r\n    const isIncrease = newValue > oldValue\r\n    const difference = Math.abs(newValue - oldValue)\r\n    let baseCost = isIncrease ? oldValue : newValue\r\n    let totalCost = 0\r\n    for (let i = 0; i < difference; i++) {\r\n      totalCost += baseCost * multiplier\r\n      baseCost++\r\n    }\r\n    console.log(totalCost)\r\n    return totalCost\r\n  }\r\n\r\n  createExperienceItem(\r\n    { amount, property, oldValue, newValue }: AttributeChange,\r\n    actor: Actor\r\n  ) {\r\n    const isIncrease = newValue > oldValue\r\n    const type = isIncrease ? 'wod.types.expgained' : 'wod.types.expspent'\r\n    actor.createEmbeddedDocuments('Item', [\r\n      {\r\n        name: 'Gasto exp',\r\n        type: 'Experience' as 'base',\r\n        system: {\r\n          iscreated: true,\r\n          isactive: false,\r\n          isvisible: true,\r\n          version: '4.1.5',\r\n          parentid: '',\r\n          worldanvil: '',\r\n          reference: '',\r\n          description: `${property} de ${oldValue} a ${newValue}`,\r\n          details: '',\r\n          property: [],\r\n          bonuslist: [],\r\n          isspent: true,\r\n          amount: amount,\r\n          type,\r\n        },\r\n        img: 'icons/svg/item-bag.svg',\r\n        effects: [],\r\n        folder: null,\r\n        sort: 0,\r\n      },\r\n    ])\r\n  }\r\n}\r\n","import { id } from \"../module.json\";\r\n\r\nexport const moduleId = id;\r\n","// Do not remove this import. If you do Vite will think your styles are dead\r\n// code and not include them in the build output.\r\nimport { DatabaseUpdateOperation } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/abstract/_types.mjs'\r\nimport '../styles/style.scss'\r\nimport ExperienceCounter from './apps/experienceCounter'\r\nimport { moduleId } from './constants'\r\nimport { MyModule } from './types'\r\n\r\nexport interface Changed {\r\n  system: Record<string, any>\r\n}\r\n\r\nlet module: MyModule\r\n\r\nHooks.once('init', () => {\r\n  console.log(`Initializing ${moduleId}`)\r\n  module = (game as Game).modules.get(moduleId) as unknown as MyModule\r\n  module.experienceCounter = new ExperienceCounter()\r\n})\r\n\r\nHooks.on(\r\n  'updateItem',\r\n  (\r\n    item: Item,\r\n    changed: Changed,\r\n    options: DatabaseUpdateOperation,\r\n    userId: string\r\n  ) => {\r\n    console.log('item', item)\r\n    console.log('changed', changed)\r\n    console.log('options', options)\r\n    console.log('userId', userId)\r\n  }\r\n)\r\n\r\nHooks.on('updateActor', (actor: Actor, changed: Changed) => {\r\n  module.experienceCounter.maybeAddExperienceCost(changed, actor)\r\n})\r\n\r\nHooks.on(\r\n  'preUpdateActor',\r\n  (\r\n    actor: Actor\r\n    // changed: Changed,\r\n    // options: DatabaseUpdateOperation,\r\n    // userId: string\r\n  ) => {\r\n    module.experienceCounter.storeActor(actor)\r\n  }\r\n)\r\n"],"names":["ExperienceCounter","__publicField","changed","actor","attributeChangeData","amount","previousActor","group","property","oldValue","newValue","propertiesChanged","multiplier","isIncrease","difference","baseCost","totalCost","i","type","moduleId","id","module","item","options","userId"],"mappings":"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"}